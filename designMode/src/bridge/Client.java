package bridge;

/**
 *桥接，顾名思义，就是用来连接两个部分，使得两个部分可以互相通讯，桥接模式的作用就是为被分离的抽象部分和实现部分搭桥。
 * 在现实生活中一个物品在搭配不同的配件时会产生不同的动作和结果，
 * 例如一辆赛车搭配的是硬胎或者是软胎就能够在干燥的马路上行驶，而如果要在下雨的路面行驶，就需要搭配雨胎了，
 * 这种根据行驶的路面不同，需要搭配不同的轮胎的变化的情况，我们从软件设计的角度来分析，
 * 就是一个系统由于自身的逻辑，会有两个或多个维度的变化，
 * 而为了应对这种变化，我们就可以使用桥接模式来进行系统的解耦。 桥接模式将一个系统的抽象部分和实现部分分离，
 * 使它们都可以独立地进行变化，对应到上面就是赛车的种类可以相对变化，轮胎的种类可以相对变化，
 * 形成一种交叉的关系，最后的结果就是一种赛车对应一种轮胎就能够成功产生一种结果和行为。
 *
 *         桥接模式将系统的抽象部分与实现部分分离解耦，使他们可以独立的变化。为了达到让抽象部分和实现部分独立变化的目的，
 *         桥接模式使用组合关系来代替继承关系，抽象部分拥有实现部分的接口对象，从而能够通过这个接口对象来调用具体实现部分的功能。
 *         也就是说，桥接模式中的桥接是一个单方向的关系，只能够抽象部分去使用实现部分的对象，而不能反过来。
 *
 *         桥接模式符合“开闭原则”，提高了系统的可拓展性，在两个变化维度中任意扩展一个维度，都不需要修改原来的系统；
 *         并且实现细节对客户不透明，可以隐藏实现细节。但是由于聚合关系建立在抽象层，要求开发者针对抽象进行编程，这增加系统的理解和设计难度。
 *
 *         所以，桥接模式一般适用于以下几种应用场景：
 *
 * （1）系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，则可以通过桥接模式使他们在抽象层建立一个关联关系；
 * （2）系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时
 * （3）一个类存在两个独立变化的维度，而这两个维度都需要进行扩展。
 *
 */
public class Client {

    public static void main(String[] args) {
        RefinedAbstraction abs = new RefinedAbstraction(new ConcreteImplementorA());
        abs.refinedOperation();
    }
}
